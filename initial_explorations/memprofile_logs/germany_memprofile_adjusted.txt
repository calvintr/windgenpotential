Filename: C:\Users\Calvin\.conda\envs\atlite\lib\site-packages\atlite\gis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   369    225.0 MiB    225.0 MiB           1   def shape_availability(geometry, excluder):
   370                                             """
   371                                             Compute the eligible area in one or more geometries.
   372                                         
   373                                             Parameters
   374                                             ----------
   375                                             geometry : geopandas.Series
   376                                                 Geometry of which the eligible area is computed. If the series contains
   377                                                 more than one geometry, the eligble area of the combined geometries is
   378                                                 computed.
   379                                             excluder : atlite.gis.ExclusionContainer
   380                                                 Container of all meta data or objects which to exclude, i.e.
   381                                                 rasters and geometries.
   382                                         
   383                                             Returns
   384                                             -------
   385                                             masked : np.array
   386                                                 Mask whith eligible raster cells indicated by 1 and excluded cells by 0.
   387                                             transform : rasterion.Affine
   388                                                 Affine transform of the mask.
   389                                         
   390                                             """
   391    225.0 MiB      0.0 MiB           1       exclusions = []
   392    225.0 MiB      0.0 MiB           1       if not excluder.all_open:
   393    225.2 MiB      0.2 MiB           1           excluder.open_files()
   394    225.2 MiB      0.0 MiB           1       assert geometry.crs == excluder.crs
   395                                         
   396    225.2 MiB      0.0 MiB           1       bounds = rio.features.bounds(geometry)
   397    225.2 MiB      0.0 MiB           1       transform, shape = padded_transform_and_shape(bounds, res=excluder.res)
   398                                         #    masked = geometry_mask(geometry, shape, transform).astype(int)
   399    431.8 MiB    206.6 MiB           1       masked = geometry_mask(geometry, shape, transform)
   400    431.8 MiB      0.0 MiB           1       exclusions.append(masked)
   401                                         
   402                                             # For the following: 0 is eligible, 1 in excluded
   403    431.8 MiB      0.0 MiB           1       raster = None
   404   2481.0 MiB      0.0 MiB           3       for d in excluder.rasters:
   405                                                 # allow reusing preloaded raster with different post-processing
   406   2271.7 MiB      0.0 MiB           2           if raster != d["raster"]:
   407   2271.7 MiB      0.0 MiB           2               raster = d["raster"]
   408   2271.7 MiB      0.0 MiB           2               kwargs_keys = ["allow_no_overlap", "nodata"]
   409   2271.7 MiB      0.0 MiB          20               kwargs = {k: v for k, v in d.items() if k in kwargs_keys}
   410   2274.1 MiB   1635.7 MiB           6               masked, transform = projected_mask(
   411   2271.7 MiB      0.0 MiB           4                   d["raster"], geometry, transform, shape, excluder.crs, **kwargs
   412                                                     )
   413   2274.1 MiB      0.0 MiB           2           if d["codes"]:
   414   2274.1 MiB      0.0 MiB           2               if callable(d["codes"]):
   415                                                         masked_ = d["codes"](masked)
   416                                                     else:
   417   2480.7 MiB    413.2 MiB           2                   masked_ = isin(masked, d["codes"])
   418                                                 else:
   419                                                     masked_ = masked
   420                                         
   421   2480.7 MiB      0.0 MiB           2           if d["invert"]:
   422                                         #            masked_ = ~(masked_).astype(bool)
   423   2271.7 MiB      0.0 MiB           1               masked_ = ~(masked_)
   424   2480.7 MiB      0.0 MiB           2           if d["buffer"]:
   425   2480.7 MiB      0.0 MiB           1               iterations = int(d["buffer"] / excluder.res) + 1
   426                                         #            masked_ = dilation(masked_, iterations=iterations).astype(int)
   427   2481.0 MiB      0.3 MiB           1               masked_ = dilation(masked_, iterations=iterations)
   428                                         
   429                                         #        exclusions.append(masked_.astype(int))
   430   2481.0 MiB      0.0 MiB           2           exclusions.append(masked_)
   431                                         
   432   2481.0 MiB      0.0 MiB           1       for d in excluder.geometries:
   433                                                 masked = ~geometry_mask(d["geometry"], shape, transform, invert=d["invert"])
   434                                         #        exclusions.append(masked.astype(int))
   435                                                 exclusions.append(masked)
   436                                             
   437                                         #    return (sum(exclusions) == 0).astype(float), transform
   438   2687.7 MiB    206.7 MiB           1       return (sum(exclusions) == 0), transform

