Filename: C:\Users\Calvin\.conda\envs\atlite\lib\site-packages\atlite\gis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   369     37.2 MiB     37.2 MiB           1   def shape_availability(geometry, excluder):
   370                                             """
   371                                             Compute the eligible area in one or more geometries.
   372                                         
   373                                             Parameters
   374                                             ----------
   375                                             geometry : geopandas.Series
   376                                                 Geometry of which the eligible area is computed. If the series contains
   377                                                 more than one geometry, the eligble area of the combined geometries is
   378                                                 computed.
   379                                             excluder : atlite.gis.ExclusionContainer
   380                                                 Container of all meta data or objects which to exclude, i.e.
   381                                                 rasters and geometries.
   382                                         
   383                                             Returns
   384                                             -------
   385                                             masked : np.array
   386                                                 Mask whith eligible raster cells indicated by 1 and excluded cells by 0.
   387                                             transform : rasterion.Affine
   388                                                 Affine transform of the mask.
   389                                         
   390                                             """
   391     37.2 MiB      0.0 MiB           1       exclusions = []
   392     37.3 MiB      0.0 MiB           1       if not excluder.all_open:
   393     41.9 MiB      4.6 MiB           1           excluder.open_files()
   394     41.9 MiB      0.1 MiB           1       assert geometry.crs == excluder.crs
   395                                         
   396     43.5 MiB      1.6 MiB           1       bounds = rio.features.bounds(geometry)
   397     43.6 MiB      0.1 MiB           1       transform, shape = padded_transform_and_shape(bounds, res=excluder.res)
   398    870.9 MiB    827.4 MiB           1       masked = geometry_mask(geometry, shape, transform).astype(int)
   399                                         #    masked = geometry_mask(geometry, shape, transform)
   400    870.9 MiB      0.0 MiB           1       exclusions.append(masked)
   401                                         
   402                                             # For the following: 0 is eligible, 1 in excluded
   403    870.9 MiB      0.0 MiB           1       raster = None
   404   4990.0 MiB      0.0 MiB           3       for d in excluder.rasters:
   405                                                 # allow reusing preloaded raster with different post-processing
   406   3540.3 MiB      0.0 MiB           2           if raster != d["raster"]:
   407   3540.3 MiB      0.0 MiB           2               raster = d["raster"]
   408   3540.3 MiB      0.0 MiB           2               kwargs_keys = ["allow_no_overlap", "nodata"]
   409   3540.3 MiB      0.0 MiB          20               kwargs = {k: v for k, v in d.items() if k in kwargs_keys}
   410   3542.8 MiB   1638.7 MiB           6               masked, transform = projected_mask(
   411   3540.3 MiB      0.0 MiB           4                   d["raster"], geometry, transform, shape, excluder.crs, **kwargs
   412                                                     )
   413   3542.8 MiB      0.0 MiB           2           if d["codes"]:
   414   3542.8 MiB      0.0 MiB           2               if callable(d["codes"]):
   415                                                         masked_ = d["codes"](masked)
   416                                                     else:
   417   3542.8 MiB    206.8 MiB           2                   masked_ = isin(masked, d["codes"])
   418                                                 else:
   419                                                     masked_ = masked
   420                                         
   421   3542.8 MiB      0.0 MiB           2           if d["invert"]:
   422   2713.9 MiB      0.0 MiB           1               masked_ = ~(masked_).astype(bool)
   423                                         #            masked_ = ~(masked_)
   424   3542.8 MiB      0.0 MiB           2           if d["buffer"]:
   425   3542.8 MiB      0.0 MiB           1               iterations = int(d["buffer"] / excluder.res) + 1
   426   4163.6 MiB    620.7 MiB           1               masked_ = dilation(masked_, iterations=iterations).astype(int)
   427                                         #            masked_ = dilation(masked_, iterations=iterations)
   428                                         
   429   4990.0 MiB   1652.8 MiB           2           exclusions.append(masked_.astype(int))
   430                                         #        exclusions.append(masked_)
   431                                         
   432   4990.0 MiB      0.0 MiB           1       for d in excluder.geometries:
   433                                                 masked = ~geometry_mask(d["geometry"], shape, transform, invert=d["invert"])
   434                                                 exclusions.append(masked.astype(int))
   435                                         #        exclusions.append(masked)
   436                                             
   437   6642.8 MiB   1652.8 MiB           1       return (sum(exclusions) == 0).astype(float), transform

